package com.damian.criptoutils.ui.home;

import android.os.Bundle;
import android.os.Handler;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.TextView;
import android.widget.Toast;

import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.coordinatorlayout.widget.CoordinatorLayout;
import androidx.fragment.app.Fragment;
import androidx.lifecycle.ViewModelProvider;

import com.damian.criptoutils.MainActivity;
import com.damian.criptoutils.R;
import com.damian.criptoutils.databinding.FragmentHomeBinding;
import com.damian.criptoutils.utilities.SQLiteManager;
import com.google.android.material.snackbar.Snackbar;

// MIS IMPORTS
import android.widget.LinearLayout;
import com.android.volley.Request;
import com.android.volley.RequestQueue;
import com.android.volley.Response;
import com.android.volley.VolleyError;
import com.android.volley.toolbox.Volley;
import org.json.JSONObject;
import org.json.JSONException;
import com.android.volley.toolbox.JsonObjectRequest;


public class HomeFragment extends Fragment {

    private FragmentHomeBinding binding;
    
    // MIS VARIABLES
    private SQLiteManager SQLiteBD;
    static String PrecioObtenido = "Precio no obtenido todavía";
    int segundosDelay = 15; // Segungos tras los cuales actualizar
    // FIN MIS VARIABLES


    public View onCreateView(@NonNull LayoutInflater inflater,
                             ViewGroup container, Bundle savedInstanceState) {
        HomeViewModel homeViewModel =
                new ViewModelProvider(this).get(HomeViewModel.class);

        binding = FragmentHomeBinding.inflate(inflater, container, false);
        View root = binding.getRoot();

        ////////////////////////////////////////////////////////////////////////////////////////////
        // MI CODIGO
        //


        // Iniciamos la BD
        SQLiteBD = new SQLiteManager(getActivity());
        SQLiteBD.open();

        
        // Ponemos el precio de Bitcoin en pantalla
        Log.e("SQLite", "Cargando precio desde la BDD y poniendolo en pantalla");
        // Si no existe registro de Precio, creamos uno nuevo
        if (SQLiteBD.selectPrecioBDD("Bitcoin") == " ") {
            Log.e("SQLite", "Creando registro para Bitcoin en BBDD");
            SQLiteBD.insert("Bitcoin", "Precio desconocido", "MarketCap desconocido", getString(R.string.descripcion_bitcoin));
        } else {
            Log.e("SQLite", "Ya existe registro en BBDD para Bitcoin");
        }

        binding.textoPrecioBitcoin.setText(SQLiteBD.selectPrecioBDD("BTC: " + SQLiteBD.selectPrecioBDD("Bitcoin") + " €"));


        // Repetir codigo cada X segundos
        final Handler handler = new Handler();
        int delay = 1000; // 1000 millisegundos (1 segundo)
        Log.e("Home", "Bucle de actualización cada " + segundosDelay + " segundos");
        handler.postDelayed(new Runnable() {
            public void run() {


                Log.e("LlamadaAPI", "Actualizando precio cada " + segundosDelay + " segundos");
//                llamarAPIActualizarPrecioMoneda("Bitcoin", R.id.texto_precioBitcoin, true, false);


                // Creamos Snackbar para indicar que se va a actualizar el precio
//                LinearLayout layout_Snackbar;
//                layout_Snackbar = (LinearLayout) getView().findViewById(R.id.layout_Snackbar);
                if(getActivity() != null){

                    Snackbar snackbar = Snackbar.make(getView().findViewById(R.id.layout_Snackbar), "Actualizando precios en línea", Snackbar.LENGTH_SHORT);

                }
//                Snackbar.make(layout_Snackbar, "Actualizando precios en línea", Toast.LENGTH_SHORT).show();
                Snackbar snackbar = Snackbar.make(getView().findViewById(R.id.layout_Snackbar), "Actualizando precios en línea", Snackbar.LENGTH_SHORT);
//                rootlayout = (CoordinatorLayout) rootView.findViewById(R.id.coordinatorLayout);
//                Snackbar.make(getActivity().findViewById(android.R.id.content), "Actualizando precios en línea", Toast.LENGTH_SHORT).show();
//                Snackbar.make(requireActivity().findViewById(R.id.layoutSnackbar),"your message", Snackbar.LENGTH_LONG)
//                        .show();
//                snackbar.show();
//                Snackbar.make(mainLayout, "Precio actualizado, precio de " + moneda + ": " + respuestaAPIParseada + " EUR", Toast.LENGTH_SHORT).show();


                llamarAPIPrecioMonedaYBD("Bitcoin", true, false);


                handler.postDelayed(this, delay * segundosDelay); //Repetir cada 30 segundos (delay * 30)
            }
        }, delay);





















        
        //
        // FIN DE MI CODIGO
        ////////////////////////////////////////////////////////////////////////////////////////////


        final TextView textView = binding.textHome;
        homeViewModel.getText().observe(getViewLifecycleOwner(), textView::setText);
        return root;
    }

    @Override
    public void onDestroyView() {
        super.onDestroyView();
        binding = null;
    }











    // Este elemento obtiene el precio de la criptomoneda indicada, lo guarda en BD y devuelve el valor
    public void llamarAPIPrecioMonedaYBD(String moneda, boolean snackbar, boolean toast) {

        String url = "https://api.coingecko.com/api/v3/simple/price?ids=" + moneda + "&vs_currencies=eur";

        RequestQueue queue = Volley.newRequestQueue(getActivity());

        JsonObjectRequest jsonObjectRequest = new JsonObjectRequest(Request.Method.GET, url, null, new Response.Listener<JSONObject>() {

            @Override
            public void onResponse(JSONObject response) {

                try {

                    Log.e("LlamadaAPI", "Llamando a API: " + url);
                    Log.e("LlamadaAPI", "Respuesta API: " + response);

                    String respuestaAPIParseada = response.getJSONObject(moneda.toLowerCase()).getString("eur");

                    Log.e("LlamadaAPI", "Respuesta API: Parseada: " + respuestaAPIParseada);

                    HomeFragment.PrecioObtenido = respuestaAPIParseada;

//                  Log.e("LlamadaAPI", "Guardando " + response.getJSONObject(moneda.toLowerCase()).getString("eur") + " en la Base de Datos");
                    Log.e("SQLite", "Guardando " + respuestaAPIParseada + " en la BD SQLite de Criptos");

                    // ODO:  ESO DE NOMBRE HABRIA QUE CAMBIARLO POR 'Bitcoin'
                    SQLiteBD.actualizarPrecio("Nombre", respuestaAPIParseada);

                    Log.e("LlamadaAPI", "Guardado: '" + SQLiteBD.selectPrecioBDD("Bitcoin") + "' en la Base de Datos");

                    try {
                        TextView texto_precioBitcoin = (TextView) getView().findViewById(R.id.texto_precioBitcoin);
                        texto_precioBitcoin.setText("BTC: " + SQLiteBD.selectPrecioBDD("Bitcoin") + " €");
                    } catch (NullPointerException e) {
                        e.printStackTrace();
                    }

                    if (toast == true) {
                        //Toast.makeText(getApplicationContext(), "El precio de Bitcoin es: " + respuestaAPIParseada + " EUR", Toast.LENGTH_SHORT).show();
                        Toast.makeText(getActivity(), "Precio actualizado, precio de " + moneda + ": " + respuestaAPIParseada + " EUR", Toast.LENGTH_SHORT).show();
                    }
                    if (snackbar == true) {
                        LinearLayout layout_Snackbar;
                        layout_Snackbar = (LinearLayout) getView().findViewById(R.id.layout_Snackbar);
                        Snackbar.make(layout_Snackbar, "Precio actualizado, precio de " + moneda + ": " + respuestaAPIParseada + " EUR", Toast.LENGTH_SHORT).show();
                    }

                } catch (JSONException e) {
                    Log.e("LlamadaAPI", "Error al parsear u obtener JSON");
                    e.printStackTrace();
                }
            }
        }, new Response.ErrorListener() {
            @Override
            public void onErrorResponse(VolleyError error) {
//                Toast.makeText(getActivity(), "Se produjo un error al conectar con la API, comprueba tu internet", Toast.LENGTH_SHORT).show();
                LinearLayout layout_Snackbar;
                layout_Snackbar = (LinearLayout) getView().findViewById(R.id.layout_Snackbar);
                Snackbar.make(layout_Snackbar, "Se produjo un error al conectar con la API, comprueba tu internet", Toast.LENGTH_SHORT).show();
                Log.e("LlamadaAPI", "Se produjo un error al conectar con la API, posiblemente no haya conexión a Internet");
            }
        });
        queue.add(jsonObjectRequest);
    }






    public void botonActualizarPrecioBitcoinHome() {

        Log.e("LlamadaAPI", "Actualizando por botón");
//      llamarAPIActualizarPrecioMoneda("Bitcoin", R.id.texto_precioBitcoin, true, false);


        // Creamos Snackbar para indicar que se va a actualizar el precio
        LinearLayout layout_Snackbar;
        layout_Snackbar = (LinearLayout) getView().findViewById(R.id.layout_Snackbar);
        Snackbar.make(layout_Snackbar, "Actualizando precios en línea", Toast.LENGTH_SHORT).show();
//      Snackbar.make(mainLayout, "Precio actualizado, precio de " + moneda + ": " + respuestaAPIParseada + " EUR", Toast.LENGTH_SHORT).show();


        llamarAPIPrecioMonedaYBD("Bitcoin", true, false);

    }
    
    
    
    
    
    
    
    
    
}